<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>golang-map</title>
    <url>/2021/12/18/golang-map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-Map的Value赋值"><a href="#1-Map的Value赋值" class="headerlink" title="(1) Map的Value赋值"></a>(1) Map的Value赋值</h3><blockquote>
<p>下面代码编译会出现什么结果？</p>
</blockquote>
<blockquote>
<p>test7.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>编译失败，<code>./test7.go:18:23: cannot assign to struct field list[&quot;student&quot;].Name in map</code></p>
<p><strong>分析</strong></p>
<p><code>map[string]Student</code> 的value是一个Student结构值，所以当<code>list[&quot;student&quot;] = student</code>,是一个值拷贝过程。而<code>list[&quot;student&quot;]</code>则是一个值引用。那么值引用的特点是<code>只读</code>。所以对<code>list[&quot;student&quot;].Name = &quot;LDB&quot;</code>的修改是不允许的。</p>
<p><strong>方法一：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	<span class="comment">//list[&quot;student&quot;].Name = &quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法1:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">    tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">    list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法1:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br></pre></td></tr></table></figure>

<p>是先做一次值拷贝，做出一个<code>tmpStudent副本</code>,然后修改该副本，然后再次发生一次值拷贝复制回去，<code>list[&quot;student&quot;] = tmpStudent</code>,但是这种会在整体过程中发生2次结构体值拷贝，性能很差。</p>
<span id="more"></span>
<p><strong>方法二</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = &amp;student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们将map的类型的value由Student值，改成Student指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br></pre></td></tr></table></figure>

<p>这样，我们实际上每次修改的都是指针所指向的Student空间，指针本身是常指针，不能修改，<code>只读</code>属性，但是指向的Student是可以随便修改的，而且这里并不需要值拷贝。只是一个指针的赋值。</p>
<h3 id="2-map的遍历赋值"><a href="#2-map的遍历赋值" class="headerlink" title="(2) map的遍历赋值"></a>(2) map的遍历赋值</h3><hr>
<blockquote>
<p>以下代码有什么问题，说明原因</p>
</blockquote>
<blockquote>
<p>test8.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组依次添加到map中</span></span><br><span class="line">    <span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">        m[stu.Name] = &amp;stu</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>遍历结果出现错误，输出结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; wang</span><br><span class="line">li =&gt; wang</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>

<p>map中的3个key均指向数组中最后一个结构体。</p>
<p><strong>分析</strong></p>
<p>foreach中，stu是结构体的一个拷贝副本，所以<code>m[stu.Name]=&amp;stu</code>实际上一致指向同一个指针， 最终该指针的值为遍历的最后一个<code>struct的值拷贝</code>。 </p>
<!-- ![](images/109-foreach.jpeg) -->
<img src="/2021/12/18/golang-map/109-foreach.jpeg" class="" title="foreach">

<p><strong>正确写法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历结构体数组，依次赋值给map</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(stus); i++  &#123;</span><br><span class="line">        m[stus[i].Name] = &amp;stus[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- ![](images/110-foreach2.jpeg) -->
<img src="/2021/12/18/golang-map/110-foreach2.jpeg" class="" title="foreach2">

<p><strong>运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; zhou</span><br><span class="line">li =&gt; li</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>golang-map</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-01 宜昌游记</title>
    <url>/2021/12/14/yichang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-ewhiDFFA" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="569214247" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<img src="/2021/12/14/yichang/yichang-1.jpeg" class="" title="三峡人家">
<span id="more"></span>

<img src="/2021/12/14/yichang/yichang-2.jpeg" class="" title="三峡人家">

<img src="/2021/12/14/yichang/yichang-3.jpeg" class="" title="三峡人家">]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>小仙女生气记录</title>
    <url>/2021/10/01/angry-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1c2a97599fb513bfc595a369fd409fc1c6d9bbe97e1846fc9a593ebbd2e2534a">4630436162ade97ba2718b7d0c4b3b630ef8b034c35893a7afa4c54a5752d90eba191a593f89497fdfca691efaf72d5caa0c664d8e7a85bd833fac72ade59ddbf66b4bdec75a2ed1e83f57bcb279b78cfc65fbc18f7606dbec4f8a0cfd661414c92c100d2773e693a5c8b2ccac7fa14accc64f83b5b264a4d5fdf6bd69eaa8f482afd099013e76ff4e51aba738e821baa622005a4c66f56ab33cf2343fe1cf2e0172f93bd31fce364b9080e27185a46d57dfee48fa7acad956c60072fcdef615172cb1bc7e001573317575587dc894bce886edcd55082bdd6cd35662d9dc16b455d8de94f0f748281ebc2f8fa61b6e163bb39f97ace0f687580a08ac82e3d87b3cc4a860bcf9f4cac4016a5fa2510665cf62bfb02d13da9ca02935718c0bd99b1974bc7df718442e4873b675ed20c772ccb2446272500c665df6b20bc2fab366c529276f18d89b7ba94dbe2d6d245e46b50cf5b4f3c2f11de5e3ed6bb7205fda7c213d697885fe1345f7228638a3c08305e04a89be3e5fa051f3812dc1a1c715087dd57cfd57dcb5c25b86e1c9eda872627d147b0b8c55cc38ff9e49bb50e800bfdd7ef9aeb572de22bce257fea54ef4b264f795f72e1e7ff6209eff82a55388f3d3908f4252d4621979dc25aba8ff51b10dbe9c98f227fa1f6e49d649900efbc6b83d0009b9fd31def8604bfbc17970901e153e4191602335235dbe92241edcffe75aedd378c11bdfe081aea69de92f6a8affc3c0fc8d4b3b96d8d4e73ae309342122eeafbf126d159a5859204c213929bf090c5bcb002f9965d9cdcf3c5f985c4768a8b2d0092c258c864bb20931c6fcbfa094892caa450b287fbd298aa997fa8e436e43feed53a67b9b1f1185fc8be56bc958351fe51b552f148eb60bed437585ef7a577f696bbf85f388619cdcdc8b15b4f86a8eee707cb34594ba3bebf2b01186da214a4a36b6af4b0926439a1548cf2923393cd286d355b3e78b8112f9f6c721570ec8589763b2b1f2447b8e5de645c8e7543a054bc2c1357f13bcb7cc4f24ee4b293807cd4c5b31c4e4491e377d97c969a2ff70eaa2e697bbcc08c2c009b546f68096df1887adf303888a5db50d6519e8920583a6432c2e9d4ccbf48fbd80dda9ed4ab49edf0a64f9a1176103e9dbc2eee6dda8240bc9efcb4416acfc15d6ca8bb3e872ea5cc6b469c978d67502db667174d204559fcd2126fa0b260628d35b31f8d3010f4540ce1944d9cbab184c1b4790065abc970a4a448a28e945fc817f4372ade61e528be9f0bfd6c4cf52d5b4cd5df88c7351c2d2e01e8921032038d8c9899d174cdef541cd717de8d572ce137babf725e7beef6a1f70f2e0e1d4530069e1c2f2dfa71af39aeedb0268dbbf912fbf2bbbc3147c9f74506632cd86dbd1ad726b561a9c4d40d597db04eaad27920cd40291e5c46750e0c035be2cc6e2bb79d33dafc73e33c0ed2189022f06f751fdd98c3428308b4bbccf41db35314d48abb99fa1a62eb0cffc686ca6637690ec349737c1b4df8307201136e6d91c4c74d35a9c4c7b9c855c00e0c02206c45aaccaa19c7dfcfc6a73f6a4e0cb34150048568d211f9924bd6014d6f0e949ad2a7272a8f728a775f33c9bb3cbde4044cfb2b4df6053c95efb668458d45df9d5381baff2c1d987c9ef411bccaa800e41fb7130d5e4cb5c4c46c8d44500cee212010295aba6e67a40370e089f9cd7e2d1f1bf6308ebf409144c571f004638deac6bacf79191fe076534088103ad24ce3f8771dfddfb5778370c14b3308373c93c9626a892bf864e8344a8ac45a578aa747e88652e5ca98b679d9335a2a88db71e48f57637f9a5e37034fdffac061b55e48fa22608bf9e93f1ffb5e56995d56aa13401826e99b785a13b7e8f96517c9248e097f7f39374da87ca7eb40205e56b513718af0a9d342c276ea87d9df743fef12b2b3fe666358f80b73e089a795ffe1033a223c21a80d30ecca52a10200d80d58dba1b06a19beff314fb037816b451f22070da555dcbe9666ce5bfceba6bc25b845a8516dd69f9104451b60dc83949a7a2f9eec915f455d7e26981d75c75f9c58a3bc4858a814854249a18cb432ea38ec36d908c8263166406985825af63a879ab77f36cc1d3c4e9b0b4e9f1b8c582129fde6a90dbbce0f72af30a681dc0180f2a4ae2a1ee756b6847751dc4e10a382db7c36c8adf3c641be551874e4b48d2fb7d66d0cd9a60c71ab9fc2494dadb9d98411bf8f551d567ead57f89b609f8b4e5110d62d6e76a51790ce8b2bc213edc259dd888990f49e3b662103e7987f075e1ca57fc9bf6d447cd51b76088c5b6c6ad6771d3a9e7fc1f365add7d9eeed004372a4ca43eb497db9a7ca564eb94c847f56c061e2fe7fd058be51458481852335eae2dfdaf4ef23944cf956f558e95e26dd871c9693b8f375710c0b78f1ef68fdb041634a22d9f5422cd81af138a680c867efe967e804b4976c1248eb38972e0686c693d583b57db42a875234bb8f91c56dae51c16dd0f9887fa05dd7d8dabff078c4e91012d7d2a6f6513e2319534ae2395ea7443b815a93ae95a9a4ade0290e09dc1836d96724ff45d669ee5787010c028a896695eadd19707223c02e987bd428e9e674b7f9c2a39dc14a522fe948b656a233babcbcb1f10d079ac9b010fb9af9c7282319dfcd01f35bf9892c55a181e73b6be53a74df39a7a64fb39f8bb59747d76ba20bd67db5a8211b0720f8fad14cd2ff397142e4d15d93258cfb80952859d37169084333735a16cbbc44f6588ec9a462f0680d5f5953b799c7bbf3f260ba6f5c1e70ed17a074822eaba9dd4254d4ade0fd5bd996685e21907979e1fc41ba72af563cc07f962757a1e0b9eb491df989f11f4114e89f9c80a4b817368a9ee3f1297ce032bfeefe41226167c6a9cc233700547e67a2c736418e73f12d61cc0053f5133c666b5af02d4da1940f497372c7b42240adc50c870fccdd3dfaa91c8fe44c39b8fa35694fb8664b548827611f40a3d7fd5e95ceb1d11016b1564e6f59fded62222e6401ebb312be0dfa4ac821cd9476c25691330c66e6219b7b689aeac406f437be72920db1fa6ab46d3de093e88b17f72d2df0393839b07a91bce86348b5ae55d5834b73c7ca1bfd93d68ebc3251177f960aedb3e05a5d529d60e9a1565496fe96a9fd9468f3f129ba8da6f7e6cb5d4a29bc35e7e3eeb9a56b92f96b0b341ca161382635aaf813ec46f2f8ef76c0b71ae3ee898f7f80a401e50231f1ff522459c7b46fd41e1d7941af6b97de26b35e910db2b3567d7efba4a0b4fb2224acac370e0a25d655df8eb14918377a3033dbefa144c99f444bac30bad8f831dad01670cc4124bd3e33351f6696cea144247abd5dc7ec76b19b94f91b2aed1b16946f915f94d834fd1dd65b4819bccecd64b33b45f28a067cf3fe62fc5c04ef48cce7eda2fb68e6862b1a3b6717a6cf4703b42a999d4fcb9744be056ad9ce810dba59bc1f05d033dcba23c51d1b48bab572b150183c8b5d739504389de9ec16528bf08f5bc1f5056c717d9f594b923b785e56c0ec1b079b7c08c52887d0b3fc75ab3cda58e1ae965f049f62ad886fcd01b9726ea76c0a4338d8ffc5ba4e1e860760d148bd12cebaabf6080c19c9d21d6cba2ca856ba9bc7fe3ce5eba7c5077dbdbf5282179d603d17d2da095842390971af52bf76a0a0279c4e1d408090de3342798f484dfad355349c72e49a085571247298feddbdb6f7fd3b4129c8958723e884a3b186a868b49f084193c4c5a297bda24f2bc69aa7eda0ea4d57ef3f2173ab451139a7481c1f680f8bf962c558b406321c1426613f2921ca1fe45831ac4636a788f411a4ed81d6e78d78a11bc69c60364ea8ba687dd2d29e6f0a61f1dee2243e7fb1b22a5ed42f2b27851f0e26920b9550467e6c06e8cf32791bedfca40becc6303358a96b7cc853f42aba7a9cdd184716eb7358d2e19d877ad64d6ca322afc64d9087d7fbc9da774f30c379bad17000bd990d08808afb1810e63a0e2524ebbd8f88c5167aee9c6be4026a3a9b5ce9bb141cf6473f53c1154c9cfa28a71739d8fa94166783b5c7d2662cdcdfda383ca4067a7525d3bd5dd765355c34f53a2f7db83f103e468554964a4e8ef59a0adf7de98aaf0c8be60c8c071e302cae4305059014f9cc790c1d0c0ee89787a072a5ad0dd78f7fa64ce163c1f98ba6eafcff980ee9ce4ca64de9190be617e6b9ca239ed01560c0471afd480ef9e741e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我们</category>
      </categories>
      <tags>
        <tag>关于我们</tag>
      </tags>
  </entry>
</search>
