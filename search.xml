<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小仙女生气记录</title>
    <url>/2021/12/18/angry-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1af4f6087ae87abfcacd7282761d2ed2b1faba9668ec94d954f30a65b190e3a5">4630436162ade97ba2718b7d0c4b3b630ef8b034c35893a7afa4c54a5752d90eba191a593f89497fdfca691efaf72d5caa0c664d8e7a85bd833fac72ade59ddbf66b4bdec75a2ed1e83f57bcb279b78cfc65fbc18f7606dbec4f8a0cfd661414c92c100d2773e693a5c8b2ccac7fa14accc64f83b5b264a4d5fdf6bd69eaa8f482afd099013e76ff4e51aba738e821baa622005a4c66f56ab33cf2343fe1cf2e0172f93bd31fce364b9080e27185a46d57dfee48fa7acad956c60072fcdef615172cb1bc7e001573317575587dc894bce886edcd55082bdd6cd35662d9dc16b455d8de94f0f748281ebc2f8fa61b6e163bb39f97ace0f687580a08ac82e3d87b3cc4a860bcf9f4cac4016a5fa2510665cf62bfb02d13da9ca02935718c0bd99b1974bc7df718442e4873b675ed20c772ccb2446272500c665df6b20bc2fab3667522162e894e7dc3ab3ae02cd6e8d5fbe24f5b9dbc58767e6c99c8f3ccc2de1d648d1e060aba85e5250bcceed57b759a565629d65a5d86b1b11de8b1e87ace2e2d5813b5c896bfbf3a039a4364dad93ab825828b8b088dd9130509c289d8a6f73fa5fe44994384a425d6c039444742a081e127e9c7157f81b40afe39bb0b034beb5a95ed24003de65bd6eb25b00bd1359a08d552b1058468d2416a8ab5eb3490207c8ff2d45ffcedd54ff479dc065b129c469ca35831814e07e4ea9777191a341d2562ffa37500c2feb62da1869992438c29342152dd23b171a9762ecb99370708be0220936b054c816fea6eeba1c224116ffebde8d26ef65c7d22634b68065990a74336e270bb6c9f2115f67da6657f7c7e707d7f326ad95807040b09d765a4a3c47aac193d9cb1cab51ddc61efc362885ad5a84f0080e9251effdc6e2b917b055fcd0de0fed9309a2b6640ca0b5cde67156da76bc9cbc11e89279d2005edde34ff3b439306609a81566b59ffb7278448e5fc2944c4623d04c951bc239836d1eb44d7bb05095eb82b21b1c72878a8c056656fe81c7272c023690f141f509121b0ee0993be0046d8688200bafc37b99d44a39751f9af2e83c9c3da7d029d0499d2046a9c51b59f538ed782eb210858e72e515e9b281d8a79a205c9ce358ccbee86de48551450d8fb46be6ebbd3f1191de51c67780670e90e834d009638345751f6010d6478e8e0f97b129941dc429b4043cf0d02e7d8cdfba9db31675619b49a8d7363852e0713d36143284e01d014e0dfc8088da599b819a34a9128d1706bba3b5ef674596067effd561d5ca85a398c625fefce6ca958ea4867810d755c748adb9f10c45767f56cfcf33102956b7225cdaee0264b3da5dc811d058bad696f6c3e52fa53e6e90f99abe6e74a9d4c571527cd745dc3049d09ef03f9d2e1f24d48b6a04be5aa7e722d3b590af6a340506839f414c28e846f449ac202568f6a07c41e27df9ec3cc6facdfc245775559069f8a09a01eeb4fd83ccabc2669f11d6557ee4d9415089de9251bbafc5b2e8d0d145e02658333d4af086197f8cb9f3abdcf71c3ab901c3086f338a3970677ec86ccebcdaae1ab2cf8b91e2efb053d2f3ff15d54be69064ca7a3975f8b042039dbcb2294d3a1bb44146b9c7c8f5e3a59003cff5048611cf2e34c905fe5931254cde6bc1cd163c96bec2c457dcaf291be1b10f1aba57a26121101f63a1f52628c41072f691075ca774a5757b3d8ac59828c07e84e491218d2b9ad087ea343162be6447b33dc1655517afdf0d526473b0dbd78775362771070ddc469d6a569e169e800747f4858be686361ab0de0e619c0f995a634ae27280ef36c71e2f6aaa8f39916740e2172a3f073303db34489a21c3dbd15bba237d15ba7b4d45294304d9ed9bff2aae9ecb85971f099395a1c6b734a16aff39e348da203cd2b0190d15dc83594311eea87ee705f0584fe03ec873aef0aa3a8eab5c21bc9e5716bf58f4e37d330e3641eb46914bdb044b0435b54b868323b89e2dd786d07895e5e4236fcaa7e72c4788a53a2fedff6987ab5882bf9323d472c515caaa101aa8eff76a6073e3bdf74fac6c453201e1b99dd97d99bb098c5931a74f5bda493399dc8955ac03df88841b36122e232601c2ded6894edd02e43879d1d9a6a6cd89764bce32ce52bf5a42f9613d42a821943f3865c5b4cec9df980d057a7a099d481bb2250b23c6aaedfcb490ce5c39e8cd15b9779cc01ab6708f5cd0a75d70d0e00e02f97618ce73db72d696dbf5501306a10de65c810cd5c183e52f27d6a9c755143c701a4c9280b5fa18fe2e0eb0a5d9b534ff605c5603baa9ba40b10f5965a5507d2d3d635029e35af1fca4f9ce437fcd73ca8e0617fd4d9a68a29255c34ab14236f54102ae3982e2a5c89874a2bc9ea60d957afde4cc253c044b05f5b93bc0012097eebd58b6aa67d6666f276dc2382fdea1b20848d634d954649021e9134fbf3c6b8163714923dfdc632a82ff0ecb8a5b3e59f1a96af9bfd6c2c1b616ac0aed3926e24b911aa4a063e7548517099d8b6ac283e90d80e925e62509a9638401b7f25e8c6120c7c0a78e7e51c86b2327903a50a8bc1e05bec96669d64c3e5adfdd6be8067d86fa412e091e27da30f19f5924c648f385fc1104be2b28c807e71c98410225d75d792dc4b0d6465e18330084ea29e802ad836d0d7e7e5f27a4cb52db985ffcc987fb9966d72dd9ab6299c14b42883b516ef718cf5178fc3a3708b5bf7f291631718e78157507bb966ec0b737b8e76a6a932790ab480e7c7905d9957119dafead8c3287b5cf45ab909c6b6f38bdd8925c540fbe8a2555e755997212d7a632fc67295ade3b778d74b59efac90756c238e21b721156b993d8ac664d47fcfbb5d014d1477cff313c8f2bbf097a0440a59ea701a9e59c61c0442cbec795629f75dc5a6ef5fdce546c8992c7a8fcecba31deb9e7afdc35806fea10ae427f3aefbd514740b299ed9170bbf39577a087cb91dfcbc2319bfd1550cc8efd372e4cc4f49cce6121f20c308053e9cb535ca01f3c84c0310c6270047ba1223d3f8fb211a5171d0e57a2e23decee072c5b0cdd9940bcb81f779cfc22d876bbea71528f30bc3c24057f6a9c69665a7f59c838433d7b68436284a81342d17828ca22cc8389c6ab2ba55ea96fd13f62167673184540d6b75022c14fe09758534e0823a68eeabc06ff7fd2fb91882e7e04d6564e7cf09fcc675477d4bf1beaeac8846e1ddaa6619ccf5aeb36e32647773c4bc6abdd72994566c1b63ded87367679ef341424d269f81a4838b5926d9ceef70eb59ad2facc7a1d8f12c671af0470805a15a34b957d7b189dd5f354681e286f1844581c585567c18c0652b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我们</category>
      </categories>
      <tags>
        <tag>关于我们</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-map</title>
    <url>/2021/12/18/golang-map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-Map的Value赋值"><a href="#1-Map的Value赋值" class="headerlink" title="(1) Map的Value赋值"></a>(1) Map的Value赋值</h3><blockquote>
<p>下面代码编译会出现什么结果？</p>
</blockquote>
<blockquote>
<p>test7.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>编译失败，<code>./test7.go:18:23: cannot assign to struct field list[&quot;student&quot;].Name in map</code></p>
<p><strong>分析</strong></p>
<p><code>map[string]Student</code> 的value是一个Student结构值，所以当<code>list[&quot;student&quot;] = student</code>,是一个值拷贝过程。而<code>list[&quot;student&quot;]</code>则是一个值引用。那么值引用的特点是<code>只读</code>。所以对<code>list[&quot;student&quot;].Name = &quot;LDB&quot;</code>的修改是不允许的。</p>
<p><strong>方法一：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	<span class="comment">//list[&quot;student&quot;].Name = &quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法1:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">    tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">    list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法1:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br></pre></td></tr></table></figure>

<p>是先做一次值拷贝，做出一个<code>tmpStudent副本</code>,然后修改该副本，然后再次发生一次值拷贝复制回去，<code>list[&quot;student&quot;] = tmpStudent</code>,但是这种会在整体过程中发生2次结构体值拷贝，性能很差。</p>
<span id="more"></span>
<p><strong>方法二</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = &amp;student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们将map的类型的value由Student值，改成Student指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br></pre></td></tr></table></figure>

<p>这样，我们实际上每次修改的都是指针所指向的Student空间，指针本身是常指针，不能修改，<code>只读</code>属性，但是指向的Student是可以随便修改的，而且这里并不需要值拷贝。只是一个指针的赋值。</p>
<h3 id="2-map的遍历赋值"><a href="#2-map的遍历赋值" class="headerlink" title="(2) map的遍历赋值"></a>(2) map的遍历赋值</h3><hr>
<blockquote>
<p>以下代码有什么问题，说明原因</p>
</blockquote>
<blockquote>
<p>test8.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组依次添加到map中</span></span><br><span class="line">    <span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">        m[stu.Name] = &amp;stu</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>遍历结果出现错误，输出结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; wang</span><br><span class="line">li =&gt; wang</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>

<p>map中的3个key均指向数组中最后一个结构体。</p>
<p><strong>分析</strong></p>
<p>foreach中，stu是结构体的一个拷贝副本，所以<code>m[stu.Name]=&amp;stu</code>实际上一致指向同一个指针， 最终该指针的值为遍历的最后一个<code>struct的值拷贝</code>。 </p>
<!-- ![](images/109-foreach.jpeg) -->
<img src="/2021/12/18/golang-map/109-foreach.jpeg" class="" title="foreach">

<p><strong>正确写法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历结构体数组，依次赋值给map</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(stus); i++  &#123;</span><br><span class="line">        m[stus[i].Name] = &amp;stus[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- ![](images/110-foreach2.jpeg) -->
<img src="/2021/12/18/golang-map/110-foreach2.jpeg" class="" title="foreach2">

<p><strong>运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; zhou</span><br><span class="line">li =&gt; li</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>golang-map</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-01 宜昌游记</title>
    <url>/2021/12/14/yichang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-nMfAmZsP" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="569214247" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<img src="/2021/12/14/yichang/yichang-1.jpeg" class="" title="三峡人家">
<span id="more"></span>

<img src="/2021/12/14/yichang/yichang-2.jpeg" class="" title="三峡人家">

<img src="/2021/12/14/yichang/yichang-3.jpeg" class="" title="三峡人家">]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
</search>
