<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小仙女生气记录</title>
    <url>/2021/12/18/angry-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aa315e8417bc183fe1dd5f641f0ac62c5a527a79f1d737796ebc0edf2d8a756b">ecf9837243792bd3100919c99bb72774089bffa941b0522f81cb58daaf633372d7e4dc941023f98c387c120b8367f1140778fab0f2adce5604c27e5abee566efe025ef241d0dad6975d5d5c85d6fc82f043354a34e90d909ed996581bdb8fceec705e0e18165737cd44fa82849eac62a8bb67d2d28adbb09ce3787654de93399e5306d4dc58aebb3b6b2865038070dd678dab743bfa5b2874bc5bf0cb6f34b85f309ffffd99d4df63f4f1a3b643f94ecf20e01a9dd5c2e09eeb5832114997c3d674350c4dff47508485051e4bfd4228021d26d24d7a8589167758be7040f9ed4fc73edebc05e9402b1515d136edd911284afee05b64930d3c7f8bc7109b19fbc0963332a8ba354942a022ca5c34427cf71c3e8c2f87b64c6f4c17b9069ac1cc5e1572a1b87d788113cf51dd81d46050dfec0fceff8ae56b7c08d62c3bc05e2ea685fc3ff19b5d2628d680c47c828163773fc2af3b19b7939ef7551853ded28192320ace0a501e60a79f2e5ee25fa978a9978d4728282a27c63c927e256c32b152ba345ec94f8003101f79ddc1f7bfcf12000ec7ff5e8ee22ed87cda4d6883dff43c8abb74319ba8398d249dda27eb3156ee047e3a2abe757a1109611d5f4dda2cd34212a1a2d73624a00caf29d4f7479f01008185c74e190d88aab343335b22bb457532898eb8c5f5206f914bb5a80b1bd7aa49351e6424b7284ec6b0672ef6db37ca40294f8f09dcfc39665913381bf0f1d87812ba91535bc6030b8ce9c89171446c75760871c44e6d44c87a5e1b4bdbcffbb7ee1e6b74fa65f44d027986a2ba86b8cb84fbe7b773aa15d8fd82e7dc1976619804bc750b78d59bae303a388c193e88dcd96d422a84147e2dcfafd8f9838a1914bd431de5d81246d5d24187ab7ebc9adcbea04d73ec38b87a0f813addc587a2d22878e24ae2db67a9ed6dab43fe0d523cd343ca4915fa35d4ebf74e6085e98a352b168509a7eb9d52e115ba5cda18a954853d3d96d1a02dcb6e00635de3dcb85b552d4dfa40924a68f1a53eb300ed2e17d47f4eee574a87611a7efae10bc98385de54474c3333e02baf1784533cd5979d7ba8d89a266fad1c0455597467709da021c43df64ca2119e636e8cf86296c7101f2a95416e2b19c0bda5ffe633448174474f0e39f5adb3f09229674d378969851d5350a98686b7b2b978669d338fc21b0400678c2709de747e38b5d4341e0efb04daee3904b8ddd6b4cd9aee6710fceeac4d70ae9c783dc08d85eaca30c6567e14a15e9909613ec4c8afcc76d52857c086b7d4c8a3fcacebfb81e9f1f55deec1f0399a3f9d2620a45633ad550ad73a95a31478f425376f94c166a42af3388977878682ed9564c07807357817f6ac056c4edcd2532039013b37d3b7db84f3285413c9d7948446a09e5da53568f64c0f8867c67a62237acc6040c58b3efdc168c988609cef76e452517b498955bd2fbaff05feb9c5bb19bf5758b2b0b58d46005dfb5628230951cc10bb2c74c6300b9bafd1dff7319b317936e9ba9620b084650d1ef5abf4ef2f2ac0d58ed212461a0fe8e9623025a5024834ff5952abb50e0a5b5fc18aaad5e00b6ff837320287b5032dd8a1a5386cdeef7051121810658502cb5412eee14343c9f02494108421ca64445c3a8a7c0002c25c572e074fa62989b65cf65f461b73b85f011e0b148c0bf80142feb5f8e5ee955c8f195903c62bc48598f6c1f573a82cc98f383236313235d53c71c47f0f14f132364eec31bf802001518dcdfd286b0dec1ca400ed3ea19fa6677832909c8419a183884c3a9a624307adac4c816a9a1d98b702662e1acd37198d03c7cfec542971dcf9ba973da6475633290291f26dcb44cb0484a4fd48b43afe1137dda6bbab0f1520f308f6eaadc1d98cff7aba810a6b198c8a22c9c5e38f9baed447952be2fb70ee695eb18e21f7282a273c6b46f4c23483702fda6630fc522a5f5f1953bf34a8b45ec306f24fbf6e55862fa883c4b656dadc890bef49ea8c3467105a2c98e479e2c190a69151c08f606a03e3e147e93d3742ebc233b457abce36a90f20afaae41be5f436e1f9ab80c7abca33c8b0f2e0bbf075b279252c292d5e580fe64aeb3c2e6211f40bb73f6669d4f19d073c9e614f787550c607717d5bb6296746f69280f5f740050fb4878f216aaeea22770514a820e1e2d1b4eccb0d3dac32b274bbd22d8063b119c3f07cc4a4050efbd9fd50fc656141b608c4568dce686b96937479357e471779d422e7074d65058428233e8eab5dfefff3d8211d8fa4c385b4c4a0180c0ea99ee3b9f98d5d5e1df8482e482a740fca434dbba4516504ec3b6f2d025c5f0c07e7e3f4fbb2eb05f5dcdbe76bb66477ee3cebcf35145c90de7a6e6663f610089525f9aa5f04f52ecc2af2db78577f4102477b2504a027fca113ed91fc75b59e34ed13550f0adde848bd2f3300640674ec6c833461f47e24a4472b0808d2b818ffe996e92745f80f892af869c109856f8e5e8595a6c61499876e657b28194a94a0993325a8373e34dbbe2619039853a2cd0db441a95b6ec440cacbe338e19083632e399b9049a40e07dd652b2469794d3050ff42fa3c3c486fb3f87650cb5e2f68ad595ae7ce27cac77eb93c6c10d6c9676bca90f46670aeeae8b495363ae1b2d258d69e82967b30403bfc6000b9bd9e690817ecdd3a3fda21a4b55f78dc5d93ca2246656e8e104710922e0d2f2e0693086c271d0457555fcda1537c757b1a0c7965564b24e00fff570b346b4e772b7f76e2eaa20d8e6035aeec66fd7940740ba741ea7468bb2b5efd67e1dc5b70316bab1372ea026e6942f04568d71e23ee771efb3dd1535082a5bc3295626e4caaf5cce9ee401284cee3f422fc7141004978bf5ee0ae38060dd373a812866716ef82432bd68c3db56fa863d11f9c6781b4f632e01dcc93093d191f3680465be41078eb4337011fc7d97ecf70b3b64a3fb9f8a68c32a05d96b0d0f45c35bd79df72e3aa1682fdf2d9227078ce1acd36874105dbcd410643e97cbafa1c96bc6fe0682177db93b6bbaf65b508ef0f93c4482506455cd108973a09ed992db3e6c22ecd63c1a3b8c81ff22b947de9722da434ba573d19c60927e29b1570fe3f3a1f67b4598bc06c1c92f9bef39181cebdddc84ba4ca224bf4a9d61ce8e8704ec1c07323aec5723d9260a4156872224418505e249845f5059e59d4621ada896e356de3946b44b25e0da6b62c2d2671009d1f48569e316acddbbff2c0a3e2d6b03ca5d3556bb8c4ce32f69837b0a4debe410719b20239b78a0e9b8368e21cf9b41408af68876e32d261e1671687055b0f85529a1ff95</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我们</category>
      </categories>
      <tags>
        <tag>关于我们</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-map</title>
    <url>/2021/12/18/golang-map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-Map的Value赋值"><a href="#1-Map的Value赋值" class="headerlink" title="(1) Map的Value赋值"></a>(1) Map的Value赋值</h3><blockquote>
<p>下面代码编译会出现什么结果？</p>
</blockquote>
<blockquote>
<p>test7.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>编译失败，<code>./test7.go:18:23: cannot assign to struct field list[&quot;student&quot;].Name in map</code></p>
<p><strong>分析</strong></p>
<p><code>map[string]Student</code> 的value是一个Student结构值，所以当<code>list[&quot;student&quot;] = student</code>,是一个值拷贝过程。而<code>list[&quot;student&quot;]</code>则是一个值引用。那么值引用的特点是<code>只读</code>。所以对<code>list[&quot;student&quot;].Name = &quot;LDB&quot;</code>的修改是不允许的。</p>
<p><strong>方法一：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	<span class="comment">//list[&quot;student&quot;].Name = &quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法1:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">    tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">    list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法1:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br></pre></td></tr></table></figure>

<p>是先做一次值拷贝，做出一个<code>tmpStudent副本</code>,然后修改该副本，然后再次发生一次值拷贝复制回去，<code>list[&quot;student&quot;] = tmpStudent</code>,但是这种会在整体过程中发生2次结构体值拷贝，性能很差。</p>
<span id="more"></span>
<p><strong>方法二</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = &amp;student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们将map的类型的value由Student值，改成Student指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br></pre></td></tr></table></figure>

<p>这样，我们实际上每次修改的都是指针所指向的Student空间，指针本身是常指针，不能修改，<code>只读</code>属性，但是指向的Student是可以随便修改的，而且这里并不需要值拷贝。只是一个指针的赋值。</p>
<h3 id="2-map的遍历赋值"><a href="#2-map的遍历赋值" class="headerlink" title="(2) map的遍历赋值"></a>(2) map的遍历赋值</h3><hr>
<blockquote>
<p>以下代码有什么问题，说明原因</p>
</blockquote>
<blockquote>
<p>test8.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组依次添加到map中</span></span><br><span class="line">    <span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">        m[stu.Name] = &amp;stu</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>遍历结果出现错误，输出结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; wang</span><br><span class="line">li =&gt; wang</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>

<p>map中的3个key均指向数组中最后一个结构体。</p>
<p><strong>分析</strong></p>
<p>foreach中，stu是结构体的一个拷贝副本，所以<code>m[stu.Name]=&amp;stu</code>实际上一致指向同一个指针， 最终该指针的值为遍历的最后一个<code>struct的值拷贝</code>。 </p>
<!-- ![](images/109-foreach.jpeg) -->
<img src="/2021/12/18/golang-map/109-foreach.jpeg" class="" title="foreach">

<p><strong>正确写法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历结构体数组，依次赋值给map</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(stus); i++  &#123;</span><br><span class="line">        m[stus[i].Name] = &amp;stus[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- ![](images/110-foreach2.jpeg) -->
<img src="/2021/12/18/golang-map/110-foreach2.jpeg" class="" title="foreach2">

<p><strong>运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; zhou</span><br><span class="line">li =&gt; li</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>golang-map</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-01 宜昌游记</title>
    <url>/2021/12/14/yichang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-nMfAmZsP" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="569214247" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<img src="/2021/12/14/yichang/yichang-1.jpeg" class="" title="三峡人家">
<span id="more"></span>

<img src="/2021/12/14/yichang/yichang-2.jpeg" class="" title="三峡人家">

<img src="/2021/12/14/yichang/yichang-3.jpeg" class="" title="三峡人家">]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
</search>
