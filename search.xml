<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小仙女生气记录</title>
    <url>/2021/12/18/angry-record/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2966a79f6187edf30143d3af01c3ff37ac9c01b3088fdd6686345811b3f1de98">4630436162ade97ba2718b7d0c4b3b630ef8b034c35893a7afa4c54a5752d90eba191a593f89497fdfca691efaf72d5caa0c664d8e7a85bd833fac72ade59ddbf66b4bdec75a2ed1e83f57bcb279b78cfc65fbc18f7606dbec4f8a0cfd661414c92c100d2773e693a5c8b2ccac7fa14accc64f83b5b264a4d5fdf6bd69eaa8f482afd099013e76ff4e51aba738e821baa622005a4c66f56ab33cf2343fe1cf2e0172f93bd31fce364b9080e27185a46d57dfee48fa7acad956c60072fcdef615172cb1bc7e001573317575587dc894bce886edcd55082bdd6cd35662d9dc16b455d8de94f0f748281ebc2f8fa61b6e163bb39f97ace0f687580a08ac82e3d87b3cc4a860bcf9f4cac4016a5fa2510665cf62bfb02d13da9ca02935718c0bd99b1974bc7df718442e4873b675ed20c772ccb2446272500c665df6b20bc2fab366a6f4e9cef98c05008322cf24e35c4483ebe0dc1e7a5d6321351e298aeed19c436d0ff5ff0fb4d1d9ba43c81db82dfadf0ad0aee2e4b73f65a9760fd042b7a3bd8aad89bab31382a6dfb5b3a25e005f9ff5698d45462f82f7b9109ac055a777fa921b80f7b07d60dfdd09250aa17be90c956c348b033cc064720c73eee9abe388891984b9373f72b7128df16f29f06fb749811a675bd385f978431b7916500cfa2564ae9a0148828ef3191faafbbc83f2a786ba57a043fa639b181d67c8896f52854829e2d841ded1c5df02d5296058fe7b0bdf3dd038122923732f4e1612d45860acafa648b36ae0851404b17c2d6fd6d7c17f223dd2fe45cdefdb8ab5a209f28bd2ad21789d1a9ae55f00dea2e3f8edba676e86c941010b21640dcdedbc9e1c50707d7d64aabad2f6abd0510be25d071fc7cea05487fcccf9c22d1d075ae48e5505f3353f88c6021b6dbec983305939c53ddb3807d5fb9a331d178935c46204afbe349fdc2323ee6d64971f92cf8d1d846598bab8b8092daccf5f1ba305b295ffef4ada883786e4e4548d27440fd55a91e21c4b98eeddc4d05861200e047e51f194ff1a95fd5a247784c91bce0a291de63e01601c54c2d7a83a9c17af76f0b1c670ab0b9cacfd00e30ef7f1d18c53208b67e70873f8bc31fddfcc7ffe9cea1205f9ef144b26fb2d959a104d6978b8ab8758564f4c6fcd0d63afbcffaa67308b5d524bedd2d69d7e8424efd83b25fd34eb0649bf0d06915ffa588985c0b1b53e0d7050556be252983f55777119ba3a5b2df22fe35edf6a8b50ae8262ccdfe2651df84b0d61cd286b9b4a23261590795bf121f285ff03012df602b34c758746299755009346d437f4bbc7d046b1a2903927ab1c20665321f2579333d76f305c4f9c56c8c13920c460ec3b2329d5685f37e14ae009543676d01a9163d1e52c2f0760c7c62b69920826edb22624c8f57f813aad918dd1a1af1a591e19b73e74eb9405230d6826bc6cec6f238149ef937fc3648cc4e70152b87c54a32e68435229abe0b3ec2ddffa4d528d376e64ebeb2ba73e83a0ba76b1c912d35a6a743213ea69cadc79fe7e34ebc47f20494aa701be6c874ea7ea9eae0d7c5921d2b1b6a1ef515c8d30fd81cac157bfe30ed0f9030ad83ab04d8937b37c5c76781e342d63b7fa9a26e7ae32a2662f85efa6a6dea7a13f01730f9967817d3890ccb8690b8f9ca232f966aefe6b2162a0818d482df7cdbb924f3ba69f3f74a80d57a60f2a69442ef27d36120b7fdf8f95cf32f6fd2145457abf5352bad1bc7de40bf50c3f4d8b574ad1602f08dfee0bba2c51497ff881a3d520798c297ccacdd8930d7e2d7aaba25782ee4a3cc4b3dc10813a7205e0f387b58bcdc4b9f0778c030b7b19acd06c37e7dd1f876a2dcb34c6a61f7cb2e13608c3c0b719f17f144efed64b80ad8ad7ed8e5a4b2037cb151b0309be2575b1728bb881303fc7ef2b2e8d580d9ff8db657c0c15058dd333f11582d28e8e17481a400028fcbaf8f852129131db4b998817fcbf6cf9a8bda683a28bad97d88468c5ef8cee5e6fab10f8ee105e4b916c9d9a524aeee226da6778d65e2c4b1993423d3f524ab6dfab10aa6366bb7a80b165ca469aa3acc19184c92f31bad0c96831d9839e1fbb311883f0417611df9553b5338a2a7bb6acdf3566f8fea4389f0a71246e1715d94b0a5f50890b339e44fd9fca95d3035c0a3f880534385c1eda05c6c372447062b60e5f158dd2465910e6247b7e62775d67b44a1a28c557230470d365d4df75830fb7cd112ab0f1e368780d238e82272aeb365cdf3d7f49b4ac768a6ce5809adb6872f9e9f347581fa76674ef9fa751a25288eca17922d96167edec72be14f5456b9abc2d577ef67c7ec85bca04afed1577d7cbf305072312421ce422669d248cb4fef76e525c3f74cab9dae87457fbf1f34ffb251cf311a595c8cef00f1c97d392d2137c1ea0025a54ad2c6284a13001dc83cee0d6bd36979fd37d223bf4c672f49b3c7628b19328efe5301cef9ecdb61e2146241ee714a8cfc10af6c08a8f4806f72f3f3e83a34a67b78c5aa43ab04a115f8cad7c9c8756232bfd6b1c637801c7663a80e74982f1ff6d407e72cb065d87bb89c8eb1a9acc95f3a0b86e12c55fa8cc7bc80ea516af825928235b67a2310be2529b27d51b63ffa5e9753a02028d8b5de26c7b99e4638a6a0b9521d43135729209bae59d586ff49b9074111d24315532a99593d640dc802d299859de59c946b0996661afc55ab75dd0c190f05d4783ba7eb78f32978dd900fbf2852210dd2cb5756c1fec24438d9881195223dc4b4f2f9dd500f6ab34af8867b6dfe99d082c8a2eac0413dea700ccad9a2799d070a8c35e015fa1606393a8fee9bd0ac285848c35c5de114f87a2006c8d5143226b17ab8b49cd6bba7e284a57aead50faa78371dbe807ee576bd28b545d4e6ad14aaf216bbe5f792662eeb51a4e7fc96289000a509bfca1765db697c4dee6344328c0a78875a73ecb47a7f68b41f397c3691d2ec28b44501d087960311ca8675f5f2cb6c47156e02efec3720d2aec70613ccce1d4e79a668112bc62649fbee7f80b548c08cdd0d7050200ca67a2f53b7bb76686c3206a055eaaf6ecd329563a8fb351f4a3d12ded11b79b847871a735cdce6f3ca8dbd3ebfcc36ca9f1ed375857a09a5cccd80eae0291a53a5b46aec05c64b1c0ad2408d0c3c72881e96dfc64a1ed1c819b4d588bff2f03faa6107ae50a4eec7ae578272c219959da589407e1536d984c1ab0385c02a86fdb61007a2c3eaac2f86b69fc8c3e4821d02bca40fe7299c2c4c4e267addf27ad3b6178f2500b927b3b404b6f8dc4b06e8a0c46415a4f8b542fe91c085f88f45d4afa2407</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>我们</category>
      </categories>
      <tags>
        <tag>关于我们</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-map</title>
    <url>/2021/12/18/golang-map/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="1-Map的Value赋值"><a href="#1-Map的Value赋值" class="headerlink" title="(1) Map的Value赋值"></a>(1) Map的Value赋值</h3><blockquote>
<p>下面代码编译会出现什么结果？</p>
</blockquote>
<blockquote>
<p>test7.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>编译失败，<code>./test7.go:18:23: cannot assign to struct field list[&quot;student&quot;].Name in map</code></p>
<p><strong>分析</strong></p>
<p><code>map[string]Student</code> 的value是一个Student结构值，所以当<code>list[&quot;student&quot;] = student</code>,是一个值拷贝过程。而<code>list[&quot;student&quot;]</code>则是一个值引用。那么值引用的特点是<code>只读</code>。所以对<code>list[&quot;student&quot;].Name = &quot;LDB&quot;</code>的修改是不允许的。</p>
<p><strong>方法一：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = student</span><br><span class="line">	<span class="comment">//list[&quot;student&quot;].Name = &quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        方法1:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">    tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">    list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法1:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">tmpStudent := list[<span class="string">&quot;student&quot;</span>]</span><br><span class="line">tmpStudent.Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line">list[<span class="string">&quot;student&quot;</span>] = tmpStudent</span><br></pre></td></tr></table></figure>

<p>是先做一次值拷贝，做出一个<code>tmpStudent副本</code>,然后修改该副本，然后再次发生一次值拷贝复制回去，<code>list[&quot;student&quot;] = tmpStudent</code>,但是这种会在整体过程中发生2次结构体值拷贝，性能很差。</p>
<span id="more"></span>
<p><strong>方法二</strong>：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	list = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Student)</span><br><span class="line"></span><br><span class="line">	student := Student&#123;<span class="string">&quot;Aceld&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>] = &amp;student</span><br><span class="line">	list[<span class="string">&quot;student&quot;</span>].Name = <span class="string">&quot;LDB&quot;</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(list[<span class="string">&quot;student&quot;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们将map的类型的value由Student值，改成Student指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list <span class="keyword">map</span>[<span class="keyword">string</span>]*Student</span><br></pre></td></tr></table></figure>

<p>这样，我们实际上每次修改的都是指针所指向的Student空间，指针本身是常指针，不能修改，<code>只读</code>属性，但是指向的Student是可以随便修改的，而且这里并不需要值拷贝。只是一个指针的赋值。</p>
<h3 id="2-map的遍历赋值"><a href="#2-map的遍历赋值" class="headerlink" title="(2) map的遍历赋值"></a>(2) map的遍历赋值</h3><hr>
<blockquote>
<p>以下代码有什么问题，说明原因</p>
</blockquote>
<blockquote>
<p>test8.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数组依次添加到map中</span></span><br><span class="line">    <span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">        m[stu.Name] = &amp;stu</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结果</strong></p>
<p>遍历结果出现错误，输出结果为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; wang</span><br><span class="line">li =&gt; wang</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>

<p>map中的3个key均指向数组中最后一个结构体。</p>
<p><strong>分析</strong></p>
<p>foreach中，stu是结构体的一个拷贝副本，所以<code>m[stu.Name]=&amp;stu</code>实际上一致指向同一个指针， 最终该指针的值为遍历的最后一个<code>struct的值拷贝</code>。 </p>
<!-- ![](images/109-foreach.jpeg) -->
<img src="/2021/12/18/golang-map/109-foreach.jpeg" class="" title="foreach">

<p><strong>正确写法</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义map</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义student数组</span></span><br><span class="line">    stus := []student&#123;</span><br><span class="line">        &#123;Name: <span class="string">&quot;zhou&quot;</span>, Age: <span class="number">24</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;li&quot;</span>, Age: <span class="number">23</span>&#125;,</span><br><span class="line">        &#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">22</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历结构体数组，依次赋值给map</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(stus); i++  &#123;</span><br><span class="line">        m[stus[i].Name] = &amp;stus[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印map</span></span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        fmt.Println(k ,<span class="string">&quot;=&gt;&quot;</span>, v.Name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!-- ![](images/110-foreach2.jpeg) -->
<img src="/2021/12/18/golang-map/110-foreach2.jpeg" class="" title="foreach2">

<p><strong>运行结果</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhou =&gt; zhou</span><br><span class="line">li =&gt; li</span><br><span class="line">wang =&gt; wang</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术笔记</category>
      </categories>
      <tags>
        <tag>golang-map</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-01 宜昌游记</title>
    <url>/2021/12/14/yichang/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>
    <div id="aplayer-GDQTNPsO" class="aplayer aplayer-tag-marker meting-tag-marker"
         data-id="569214247" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"
    ></div>
<img src="/2021/12/14/yichang/yichang-1.jpeg" class="" title="三峡人家">
<span id="more"></span>

<img src="/2021/12/14/yichang/yichang-2.jpeg" class="" title="三峡人家">

<img src="/2021/12/14/yichang/yichang-3.jpeg" class="" title="三峡人家">]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
</search>
